---
version: 2.1
jobs:
  check-app:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip && pip install -r requirements.txt
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: test
          command: |
            . venv/bin/activate
            make test
      - run:
          name: lint
          command: |
            . venv/bin/activate
            make lint
  build_image_and_deploy_staging:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          name: Install awscli and gettext-base
          command: |
            sudo pip3 install awscli
            sudo apt-get install gettext-base
      - run:
          name: Install aws-iam-authenticator
          command: |
            curl -o aws-iam-authenticator curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            sudo mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
      - run:
          name: Install kubectl
          command: |
            curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - setup_remote_docker
      - run:
          name: Login to repository and build docker image
          command: |
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker build -t ${AWS_REPOSITORY_URL}/${REPOSITORY_NAME}:$RUN_ID . -f Dockerfile
            docker push ${AWS_REPOSITORY_URL}/${REPOSITORY_NAME}:$RUN_ID
      - run:
          name: Prepare K8S templates
          command: |
            aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name eks-asdfghj
            rm -rf .k8s/.generated && mkdir -p .k8s/.generated
            for f in .k8s/templates/staging.yml
              do
              envsubst < $f > ".k8s/.generated/$(basename $f)"
            done
      - run:
          name: Deploy
          command: |
            kubectl apply -f .k8s/.generated/ --validate=true
            kubectl get pod
workflows:
  build-test-and-deploy:
    jobs:
      - check-app
      - build_image_and_deploy_staging:
          requires:
            - check-app
          filters:
            branches:
              only:
                - main